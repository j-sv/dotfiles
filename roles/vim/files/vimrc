call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-unimpaired'

Plug 'itchyny/lightline.vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

" fzf
Plug 'junegunn/fzf', { 'tag': '*', 'dir': '~/.fzf', 'do': './install --all --no-zsh --no-fish' }
Plug 'junegunn/fzf.vim'
Plug 'tweekmonster/fzf-filemru'

" fancy colors
Plug 'lifepillar/vim-solarized8'
Plug 'reedes/vim-colors-pencil'

Plug 'junegunn/goyo.vim'

" git stuff
Plug 'tpope/vim-fugitive', { 'tag': '*' }
Plug 'sodapopcan/vim-twiggy', { 'tag': '*' }
Plug 'airblade/vim-gitgutter'

" syntax related stuff
Plug 'fatih/vim-go', { 'tag': '*', 'do': ':GoUpdateBinaries' }
Plug 'towolf/vim-helm'
Plug 'nathanaelkane/vim-indent-guides', { 'tag': '*' }
Plug 'pangloss/vim-javascript', { 'tag': '*' }
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty', { 'tag': '*' }

call plug#end()

" ui
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set background=dark

autocmd ColorScheme solarized8 hi StatusLine  ctermfg=246 ctermbg=NONE guifg=#839496 guibg=NONE guisp=NONE cterm=NONE gui=NONE
                           \ | hi StatusLineN ctermfg=242 ctermbg=NONE guifg=#586e75 guibg=NONE guisp=NONE cterm=NONE gui=NONE
                           \ | hi LineNr      ctermfg=242 ctermbg=NONE guifg=#586e75 guibg=NONE guisp=NONE cterm=NONE gui=NONE
                           \ | hi clear SignColum
                           \ | hi SignColumn ctermbg=NONE
                           \ | hi LineNr     ctermbg=NONE
                           \ | hi Normal     ctermbg=NONE
                           \ | hi nonText    ctermbg=NONE

colorscheme solarized8

" search
set ignorecase
set smartcase
set hlsearch

" tabs
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

" general
set autoread
set clipboard^=unnamed
set cmdheight=2
set number
set signcolumn=yes
set completeopt-=preview
set mouse-=a
set hidden
set noshowmode
set updatetime=300

" backup
set backupdir=~/.vim-tmp/backup/
set backup
set noswapfile
set directory=~/.vim-tmp/swap/
set undofile
set undodir=~/.vim-tmp/undo/
set writebackup

" speedup syntax highlighting
set nocursorcolumn
set nocursorline
syntax sync minlines=256

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set ttimeout
set ttimeoutlen=10

" wildmenu completion settings
set wildmenu
set wildmode=list:full                           " Wildcard matches the longest and shows a list
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=go/pkg                           " Go static files
set wildignore+=go/bin                           " Go bin files
set wildignore+=go/bin-vagrant                   " Go bin-vagrant files
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" mappings
let mapleader=","

nmap <Tab> <c-w>w
nmap <S-Tab> <c-w>W

nmap <leader>w :w!<cr>
map <leader><space> :let @/=''

map <leader>W :%s/\s\+$//<cr>:let @/=''<cr>
map <leader>S :set nolist!<cr>
map <leader>s <C-w>v<C-w>l

" coc.nvim
let g:coc_global_extensions = [
  \ 'coc-json',
  \ 'coc-python',
  \ 'coc-tsserver',
  \ 'coc-yaml',
  \ 'coc-rls',
  \]
let g:coc_selectmode_mapping = 0

nmap <silent> <leader>df <Plug>(coc-definition)
nmap <silent> <leader>dc <Plug>(coc-declaration)
nmap <silent> <leader>td <Plug>(coc-type-definition)
nmap <silent> <leader>im <Plug>(coc-implementation)
nmap <silent> <leader>rf <Plug>(coc-references)
nmap <silent> <leader>rn <Plug>(coc-rename)
imap <silent> <C-l> <Plug>(coc-snippets-expand)

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nnoremap <silent> K :call <SID>show_documentation()<CR>

" fzf
set rtp+=~/.fzf

nnoremap <silent><C-p> :FilesMru<cr>
nnoremap <silent><C-l> :Lines<cr>
nnoremap <silent><C-b> :Buffers<cr>

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" fugitive
:au BufReadPost fugitive://* set bufhidden=delete
:au BufEnter */.git/index nnoremap <buffer> pr :Git pull --rebase<cr>
:au BufEnter */.git/index nnoremap <buffer> grp :Git review --yes --no-rebase<cr>

" fzf
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \ }
let g:fzf_layout = { 'down': '~30%' }
let g:fzf_colors =
\ { 'fg':    ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'Type'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Character'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let $FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --exclude bob""'
let $FZF_DEFAULT_OPTS='-e --bind ctrl-a:select-all'

" vim-go
let g:go_decls_mode = 'fzf'
let g:go_def_mapping_enabled = 0
let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1
let g:go_metalinter_command = "golangci-lint run --print-issued-lines=false"
let g:go_list_type = 'quickfix'
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_statusline_duration = 10000

" bindings
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <leader>tc <Plug>(go-test-compile)
autocmd FileType go nmap <leader>tf <Plug>(go-test-func)
autocmd FileType go nmap <leader>c  <Plug>(go-coverage-toggle)
autocmd FileType go nmap <leader>ga :GoAlternate!<CR>
autocmd FileType go nmap <leader>gg <Plug>(go-generate)
autocmd FileType go nmap © :GoDeclsDir<CR>
autocmd FileType go imap © <ESC>:GoDeclsDir<CR>

" gitgutter
autocmd BufWritePost * GitGutter

" goyo
function! s:goyo_enter()
  colorscheme pencil
endfunction

function! s:goyo_leave()
  colorscheme solarized8
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" vim-indent-guides
let g:indent_guides_start_level = 2

autocmd! FileType yaml,helm,python :IndentGuidesEnable

let g:indent_guides_auto_colors = 0

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=NONE ctermbg=NONE
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=NONE ctermbg=0

" mutt
au BufNewFile,BufRead ~/.mutt/tmp/neomutt-* set tw=72 fo=watqc nojs nosmartindent
                                             \ | match ErrorMsg '\s\+$'

" lightline
function! LightlineGetBranch()
    if !exists('*fugitive#head')
        return ''
    endif

    let head = fugitive#head(10)

    if head == ''
      return ''
    endif
    return '' . head
endfunction

function! LightlineReadonly()
  if &readonly || !&modifiable
    return ''
  else
    return ''
  endif
endfunction

function! LightlineFilename()
  let filename = winwidth(0) > 70 ? expand('%') : expand('%t')
  return fnamemodify(filename, ":~:.")
endfunction

let g:lightline = {
  \ 'colorscheme': 'solarized',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
  \   'right': [ [ 'lineinfo' ], [ 'percent' ],
  \              [ 'fileformat', 'filetype', 'fileencoding' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'LightlineGetBranch',
  \   'readonly': 'LightlineReadonly',
  \   'filename': 'LightlineFilename',
  \ }
  \ }
